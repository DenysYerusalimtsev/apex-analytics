pekko {

  loglevel = DEBUG

  actor {
    provider = cluster
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
  }

  coordinated-shutdown.exit-jvm = on

  remote {
    artery {
      canonical.port = 2553
      advanced {
        # Maximum serialized message size, including header data.
        maximum-frame-size = 20 MB
      }
    }
  }

  cluster {
    sharding {
      number-of-shards = 100
      passivation = {
        strategy = "none"
      }
    }
    shutdown-after-unsuccessful-join-seed-nodes = 120s
    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver {
      # we would need to change it to lease-majority which is ideal for kubernetes
      active-strategy = keep-majority
    }
  }

  management {
    http {
      port = 8558
      bind-hostname = 0.0.0.0
    }
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
  }

  kafka {
    producer {
      kafka-clients {}
    }
  }

  http {
    server {
      idle-timeout = 600s
      linger-timeout = 15 min
    }
  }
}

http {
  host = "0.0.0.0"
  port = 8080
}

deployment {
  type = kubernetes
}

kafka {
  output {
    enabled = true
    bootstrap-servers = "my-kafka.kafka.svc.cluster.local:9092"
    topic = "frames"
    properties = {
      "security.protocol" = "SASL_PLAINTEXT",
      "sasl.mechanism" = "SCRAM-SHA-256",
      "sasl.jaas.config" = "org.apache.kafka.common.security.scram.ScramLoginModule  required username=\"user1\" password=\"6nB1iLk8CW\";"
    }
  }
}