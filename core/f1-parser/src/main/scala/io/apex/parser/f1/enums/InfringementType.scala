package io.apex.parser.f1.enums

enum InfringementType(val value: Int) {
  case BLOCKING_BY_SLOW_DRIVING extends InfringementType(0)
  case BLOCKING_BY_WRONG_WAY_DRIVING extends InfringementType(1)
  case REVERSING_OFF_THE_START_LINE extends InfringementType(2)
  case BIG_COLLISION extends InfringementType(3)
  case SMALL_COLLISION extends InfringementType(4)
  case COLLISION_FAILED_TO_HAND_BACK_POSITION_SINGLE extends InfringementType(5)
  case COLLISION_FAILED_TO_HAND_BACK_POSITION_MULTIPLE extends InfringementType(6)
  case CORNER_CUTTING_GAINED_TIME extends InfringementType(7)
  case CORNER_CUTTING_OVERTAKE_SINGLE extends InfringementType(8)
  case CORNER_CUTTING_OVERTAKE_MULTIPLE extends InfringementType(9)
  case CROSSED_PIT_EXIT_LANE extends InfringementType(10)
  case IGNORING_BLUE_FLAGS extends InfringementType(11)
  case IGNORING_YELLOW_FLAGS extends InfringementType(12)
  case IGNORING_DRIVE_THROUGH extends InfringementType(13)
  case TOO_MANY_DRIVE_THROUGHS extends InfringementType(14)
  case DRIVE_THROUGH_REMINDER_SERVE_WITHIN_N_LAPS extends InfringementType(15)
  case DRIVE_THROUGH_REMINDER_SERVE_THIS_LAP extends InfringementType(16)
  case PIT_LANE_SPEEDING extends InfringementType(17)
  case PARKET_FOR_TOO_LONG extends InfringementType(18)
  case IGNORING_TYRE_REGULATIONS extends InfringementType(19)
  case TOO_MANY_PENALTIES extends InfringementType(20)
  case MULTIPLE_WARNINGS extends InfringementType(21)
  case APPROACHING_DISQUALIFICATION extends InfringementType(22)
  case TYRE_REGULATIONS_SELECT_SINGLE extends InfringementType(23)
  case TYRE_REGULATIONS_SELECT_MULTIPLE extends InfringementType(24)
  case LAP_INVALIDATED_CORNER_CUTTING extends InfringementType(25)
  case LAP_INVALIDATED_RUNNING_WIDE extends InfringementType(26)
  case CORNER_CUTTING_RAN_WIDE_GAINED_TIME_MINOR extends InfringementType(27)
  case CORNER_CUTTING_RAN_WIDE_GAINED_TIME_SIGNIFICANT extends InfringementType(28)
  case CORNER_CUTTING_RAN_WIDE_GAINED_TIME_EXTREME extends InfringementType(29)
  case LAP_INVALIDATED_WALL_RIDING extends InfringementType(30)
  case LAP_INVALIDATED_FLASHBACK_USED extends InfringementType(31)
  case LAP_INVALIDATED_RESET_TO_TRACK extends InfringementType(32)
  case BLOCKING_THE_PITLANE extends InfringementType(33)
  case JUMP_START extends InfringementType(34)
  case SAFETY_CAR_TO_CAR_COLLISION extends InfringementType(35)
  case SAFETY_CAR_ILLEGAL_OVERTAKE extends InfringementType(36)
  case SAFETY_CAR_EXCEEDING_ALLOWED_PACE extends InfringementType(37)
  case VIRTUAL_SAFETY_CAR_EXCEEDING_ALLOWED_PACE extends InfringementType(38)
  case FORMATION_LAP_BELOW_ALLOWED_SPEED extends InfringementType(39)
  case RETIRED_MECHANICAL_FAILURE extends InfringementType(40)
  case RETIRED_TERMINALLY_DAMAGED extends InfringementType(41)
  case SAFETY_CAR_FALLING_TOO_FAR_BACK extends InfringementType(42)
  case BLACK_FLAG_TIMER extends InfringementType(43)
  case UNSERVED_STOP_GO_PENALTY extends InfringementType(44)
  case UNSERVED_DRIVE_THROUGH_PENALTY extends InfringementType(45)
  case ENGINE_COMPONENT_CHANGE extends InfringementType(46)
  case GEARBOX_CHANGE extends InfringementType(47)
  case LEAGUE_GRID_PENALTY extends InfringementType(48)
  case RETRY_PENALTY extends InfringementType(49)
  case ILLEGAL_TIME_GAIN extends InfringementType(50)
  case MANDATORY_PITSTOP extends InfringementType(51)
}

object InfringementType {
  def valueOf(value: Int): Option[InfringementType] =
    InfringementType.values.find(_.value == value)
}